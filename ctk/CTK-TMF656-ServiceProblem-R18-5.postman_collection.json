{
	"info": {
		"_postman_id": "8dfd17d0-7288-42b2-a634-80da3133e842",
		"name": "CTK-TMF656-ServiceProblem-R18-5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "N1",
			"item": [
				{
					"name": "/serviceProblem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad6c36f4-1547-472c-b6c1-a32e85f31d7a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = [ 'id', 'href', 'description', 'affectedNumberOfServices', 'category', 'originatorParty', 'priority', 'reason', 'responsibleParty', 'status', 'statusChangeDate', 'timeChanged', 'timeRaised',  ];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response id attribute is of type string', function() { pm.expect(instance.id).to.be.a('string'); });",
									"pm.test('Response href attribute is of type string', function() { pm.expect(instance.href).to.be.a('string'); });",
									"pm.test('Response description attribute is of type string', function() { pm.expect(instance.description).to.be.a('string'); });",
									"pm.test('Response affectedNumberOfServices attribute is of type number', function() { pm.expect(instance.affectedNumberOfServices).to.be.a('number'); });",
									"pm.test('Response category attribute is of type string', function() { pm.expect(instance.category).to.be.a('string'); });",
									"pm.test('Response originatorParty attribute is of type object', function() { pm.expect(instance.originatorParty).to.be.a('object'); });",
									"pm.test('Response priority attribute is of type number', function() { pm.expect(instance.priority).to.be.a('number'); });",
									"pm.test('Response reason attribute is of type string', function() { pm.expect(instance.reason).to.be.a('string'); });",
									"pm.test('Response responsibleParty attribute is of type object', function() { pm.expect(instance.responsibleParty).to.be.a('object'); });",
									"pm.test('Response status attribute is of type string', function() { pm.expect(instance.status).to.be.a('string'); });",
									"pm.test('Response statusChangeDate attribute is of type string', function() { pm.expect(instance.statusChangeDate).to.be.a('string'); });",
									"pm.test('Response timeChanged attribute is of type string', function() { pm.expect(instance.timeChanged).to.be.a('string'); });",
									"pm.test('Response timeRaised attribute is of type string', function() { pm.expect(instance.timeRaised).to.be.a('string'); });",
									"",
									"",
									"pm.test('id is set', function() {pm.globals.set('IDSP01', instance.id); pm.expect(instance.id) == pm.globals.get(\"IDSP01\");});",
									"pm.test('href is set', function() {pm.globals.set('HREFSP01', instance.href); pm.expect(instance.href) == pm.globals.get(\"HREFSP01\");});",
									"pm.test('description is set', function() {pm.globals.set('DESCRIPTIONSP01', instance.description); pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSP01\");});",
									"pm.test('affectedNumberOfServices is set', function() {pm.globals.set('AFFECTEDNUMBEROFSERVICESSP01', instance.affectedNumberOfServices); pm.expect(instance.affectedNumberOfServices) == pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\");});",
									"pm.test('category is set', function() {pm.globals.set('CATEGORYSP01', instance.category); pm.expect(instance.category) == pm.globals.get(\"CATEGORYSP01\");});",
									"pm.test('originatorParty is set', function() {pm.globals.set('ORIGINATORPARTYSP01', instance.originatorParty); pm.expect(instance.originatorParty) == pm.globals.get(\"ORIGINATORPARTYSP01\");});",
									"pm.test('priority is set', function() {pm.globals.set('PRIORITYSP01', instance.priority); pm.expect(instance.priority) == pm.globals.get(\"PRIORITYSP01\");});",
									"pm.test('reason is set', function() {pm.globals.set('REASONSP01', instance.reason); pm.expect(instance.reason) == pm.globals.get(\"REASONSP01\");});",
									"pm.test('responsibleParty is set', function() {pm.globals.set('RESPONSIBLEPARTYSP01', instance.responsibleParty); pm.expect(instance.responsibleParty) == pm.globals.get(\"RESPONSIBLEPARTYSP01\");});",
									"pm.test('status is set', function() {pm.globals.set('STATUSSP01', instance.status); pm.expect(instance.status) == pm.globals.get(\"STATUSSP01\");});",
									"pm.test('statusChangeDate is set', function() {pm.globals.set('STATUSCHANGEDATESP01', instance.statusChangeDate); pm.expect(instance.statusChangeDate) == pm.globals.get(\"STATUSCHANGEDATESP01\");});",
									"pm.test('timeChanged is set', function() {pm.globals.set('TIMECHANGEDSP01', instance.timeChanged); pm.expect(instance.timeChanged) == pm.globals.get(\"TIMECHANGEDSP01\");});",
									"pm.test('timeRaised is set', function() {pm.globals.set('TIMERAISEDSP01', instance.timeRaised); pm.expect(instance.timeRaised) == pm.globals.get(\"TIMERAISEDSP01\");});",
									"",
									"",
									"pm.test(\"Body includes value held on id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.id);",
									"      });",
									"pm.test(\"Body includes value held on href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.href);",
									"      });",
									"pm.test(\"Body includes value held on description\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.description);",
									"      });",
									"pm.test(\"Body includes value held on affectedNumberOfServices\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.affectedNumberOfServices);",
									"      });",
									"pm.test(\"Body includes value held on category\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.category);",
									"      });",
									"pm.test(\"Body includes value held on priority\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.priority);",
									"      });",
									"pm.test(\"Body includes value held on reason\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.reason);",
									"      });",
									"pm.test(\"Body includes value held on status\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.status);",
									"      });",
									"pm.test(\"Body includes value held on statusChangeDate\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.statusChangeDate);",
									"      });",
									"pm.test(\"Body includes value held on timeChanged\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.timeChanged);",
									"      });",
									"pm.test(\"Body includes value held on timeRaised\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.timeRaised);",
									"      });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"category\": \"serviceProvider.declared\",\n  \"priority\": 1,\n  \"description\" : \"Internet connection error\",\n  \"reason\": \"unknown\",\n  \"originatorParty\": {\n       \"role\": \"Service Provider\",\n       \"id\":   \"SP_00001\",\n       \"href\": \"http://api/partymanagement/SP_00001\"\n   }\n}"
						},
						"url": {
							"raw": "{{ServiceProblemAPI}}/serviceProblem",
							"host": [
								"{{ServiceProblemAPI}}"
							],
							"path": [
								"serviceProblem"
							]
						}
					},
					"response": []
				},
				{
					"name": "/serviceProblem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad6c36f4-1547-472c-b6c1-a32e85f31d7a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"",
									"        var requiredAttributes = ['id', 'href', 'description', 'affectedNumberOfServices', 'category', 'originatorParty', 'priority', 'reason', 'responsibleParty', 'status', 'statusChangeDate', 'timeChanged', 'timeRaised', ];",
									"",
									"        pm.test('Instance has all mandatory attributes', function () {",
									"            pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
									"        });",
									"",
									"",
									"",
									"        pm.test('Response id attribute is of type string', function () {",
									"            pm.expect(instance.id).to.be.a('string');",
									"        });",
									"        pm.test('Response href attribute is of type string', function () {",
									"            pm.expect(instance.href).to.be.a('string');",
									"        });",
									"        pm.test('Response description attribute is of type string', function () {",
									"            pm.expect(instance.description).to.be.a('string');",
									"        });",
									"        pm.test('Response affectedNumberOfServices attribute is of type number', function () {",
									"            pm.expect(instance.affectedNumberOfServices).to.be.a('number');",
									"        });",
									"        pm.test('Response category attribute is of type string', function () {",
									"            pm.expect(instance.category).to.be.a('string');",
									"        });",
									"        pm.test('Response originatorParty attribute is of type object', function () {",
									"            pm.expect(instance.originatorParty).to.be.a('object');",
									"        });",
									"        pm.test('Response priority attribute is of type number', function () {",
									"            pm.expect(instance.priority).to.be.a('number');",
									"        });",
									"        pm.test('Response reason attribute is of type string', function () {",
									"            pm.expect(instance.reason).to.be.a('string');",
									"        });",
									"        pm.test('Response responsibleParty attribute is of type object', function () {",
									"            pm.expect(instance.responsibleParty).to.be.a('object');",
									"        });",
									"        pm.test('Response status attribute is of type string', function () {",
									"            pm.expect(instance.status).to.be.a('string');",
									"        });",
									"        pm.test('Response statusChangeDate attribute is of type string', function () {",
									"            pm.expect(instance.statusChangeDate).to.be.a('string');",
									"        });",
									"        pm.test('Response timeChanged attribute is of type string', function () {",
									"            pm.expect(instance.timeChanged).to.be.a('string');",
									"        });",
									"        pm.test('Response timeRaised attribute is of type string', function () {",
									"            pm.expect(instance.timeRaised).to.be.a('string');",
									"        });",
									"",
									"",
									"        pm.test(\"Body includes value held on id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.id);",
									"        });",
									"        pm.test(\"Body includes value held on href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.href);",
									"        });",
									"        pm.test(\"Body includes value held on description\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.description);",
									"        });",
									"        pm.test(\"Body includes value held on affectedNumberOfServices\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.affectedNumberOfServices);",
									"        });",
									"        pm.test(\"Body includes value held on category\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.category);",
									"        });",
									"        pm.test(\"Body includes value held on priority\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.priority);",
									"        });",
									"        pm.test(\"Body includes value held on reason\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.reason);",
									"        });",
									"        pm.test(\"Body includes value held on status\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.status);",
									"        });",
									"        pm.test(\"Body includes value held on statusChangeDate\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.statusChangeDate);",
									"        });",
									"        pm.test(\"Body includes value held on timeChanged\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.timeChanged);",
									"        });",
									"        pm.test(\"Body includes value held on timeRaised\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.timeRaised);",
									"        });",
									"",
									"",
									"",
									"",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSP01\")) {",
									"",
									"            pm.test('id is ' + pm.globals.get(\"IDSP01\"), function () {",
									"                pm.expect(instance.id) == pm.globals.get(\"IDSP01\");",
									"            });",
									"            pm.test('href is ' + pm.globals.get(\"HREFSP01\"), function () {",
									"                pm.expect(instance.href) == pm.globals.get(\"HREFSP01\");",
									"            });",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSP01\"), function () {",
									"                pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSP01\");",
									"            });",
									"            pm.test('affectedNumberOfServices is ' + pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\"), function () {",
									"                pm.expect(instance.affectedNumberOfServices) == pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\");",
									"            });",
									"            pm.test('category is ' + pm.globals.get(\"CATEGORYSP01\"), function () {",
									"                pm.expect(instance.category) == pm.globals.get(\"CATEGORYSP01\");",
									"            });",
									"            pm.test('originatorParty is ' + pm.globals.get(\"ORIGINATORPARTYSP01\"), function () {",
									"                pm.expect(instance.originatorParty) == pm.globals.get(\"ORIGINATORPARTYSP01\");",
									"            });",
									"            pm.test('priority is ' + pm.globals.get(\"PRIORITYSP01\"), function () {",
									"                pm.expect(instance.priority) == pm.globals.get(\"PRIORITYSP01\");",
									"            });",
									"            pm.test('reason is ' + pm.globals.get(\"REASONSP01\"), function () {",
									"                pm.expect(instance.reason) == pm.globals.get(\"REASONSP01\");",
									"            });",
									"            pm.test('responsibleParty is ' + pm.globals.get(\"RESPONSIBLEPARTYSP01\"), function () {",
									"                pm.expect(instance.responsibleParty) == pm.globals.get(\"RESPONSIBLEPARTYSP01\");",
									"            });",
									"            pm.test('status is ' + pm.globals.get(\"STATUSSP01\"), function () {",
									"                pm.expect(instance.status) == pm.globals.get(\"STATUSSP01\");",
									"            });",
									"            pm.test('statusChangeDate is ' + pm.globals.get(\"STATUSCHANGEDATESP01\"), function () {",
									"                pm.expect(instance.statusChangeDate) == pm.globals.get(\"STATUSCHANGEDATESP01\");",
									"            });",
									"            pm.test('timeChanged is ' + pm.globals.get(\"TIMECHANGEDSP01\"), function () {",
									"                pm.expect(instance.timeChanged) == pm.globals.get(\"TIMECHANGEDSP01\");",
									"            });",
									"            pm.test('timeRaised is ' + pm.globals.get(\"TIMERAISEDSP01\"), function () {",
									"                pm.expect(instance.timeRaised) == pm.globals.get(\"TIMERAISEDSP01\");",
									"            });",
									"",
									"        }",
									"",
									"",
									"    });",
									"} else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'description', 'affectedNumberOfServices', 'category', 'originatorParty', 'priority', 'reason', 'responsibleParty', 'status', 'statusChangeDate', 'timeChanged', 'timeRaised', ];",
									"",
									"    pm.test('Instance has all mandatory attributes', function () {",
									"        pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
									"    });",
									"",
									"",
									"",
									"    pm.test('Response id attribute is of type string', function () {",
									"        pm.expect(instance.id).to.be.a('string');",
									"    });",
									"    pm.test('Response href attribute is of type string', function () {",
									"        pm.expect(instance.href).to.be.a('string');",
									"    });",
									"    pm.test('Response description attribute is of type string', function () {",
									"        pm.expect(instance.description).to.be.a('string');",
									"    });",
									"    pm.test('Response affectedNumberOfServices attribute is of type number', function () {",
									"        pm.expect(instance.affectedNumberOfServices).to.be.a('number');",
									"    });",
									"    pm.test('Response category attribute is of type string', function () {",
									"        pm.expect(instance.category).to.be.a('string');",
									"    });",
									"    pm.test('Response originatorParty attribute is of type object', function () {",
									"        pm.expect(instance.originatorParty).to.be.a('object');",
									"    });",
									"    pm.test('Response priority attribute is of type number', function () {",
									"        pm.expect(instance.priority).to.be.a('number');",
									"    });",
									"    pm.test('Response reason attribute is of type string', function () {",
									"        pm.expect(instance.reason).to.be.a('string');",
									"    });",
									"    pm.test('Response responsibleParty attribute is of type object', function () {",
									"        pm.expect(instance.responsibleParty).to.be.a('object');",
									"    });",
									"    pm.test('Response status attribute is of type string', function () {",
									"        pm.expect(instance.status).to.be.a('string');",
									"    });",
									"    pm.test('Response statusChangeDate attribute is of type string', function () {",
									"        pm.expect(instance.statusChangeDate).to.be.a('string');",
									"    });",
									"    pm.test('Response timeChanged attribute is of type string', function () {",
									"        pm.expect(instance.timeChanged).to.be.a('string');",
									"    });",
									"    pm.test('Response timeRaised attribute is of type string', function () {",
									"        pm.expect(instance.timeRaised).to.be.a('string');",
									"    });",
									"",
									"",
									"    pm.test(\"Body includes value held on id\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.id);",
									"    });",
									"    pm.test(\"Body includes value held on href\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.href);",
									"    });",
									"    pm.test(\"Body includes value held on description\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.description);",
									"    });",
									"    pm.test(\"Body includes value held on affectedNumberOfServices\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.affectedNumberOfServices);",
									"    });",
									"    pm.test(\"Body includes value held on category\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.category);",
									"    });",
									"    pm.test(\"Body includes value held on priority\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.priority);",
									"    });",
									"    pm.test(\"Body includes value held on reason\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.reason);",
									"    });",
									"    pm.test(\"Body includes value held on status\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.status);",
									"    });",
									"    pm.test(\"Body includes value held on statusChangeDate\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.statusChangeDate);",
									"    });",
									"    pm.test(\"Body includes value held on timeChanged\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.timeChanged);",
									"    });",
									"    pm.test(\"Body includes value held on timeRaised\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.timeRaised);",
									"    });",
									"",
									"",
									"",
									"",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDSP01\")) {",
									"",
									"        pm.test('id is ' + pm.globals.get(\"IDSP01\"), function () {",
									"            pm.expect(instance.id) == pm.globals.get(\"IDSP01\");",
									"        });",
									"        pm.test('href is ' + pm.globals.get(\"HREFSP01\"), function () {",
									"            pm.expect(instance.href) == pm.globals.get(\"HREFSP01\");",
									"        });",
									"        pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSP01\"), function () {",
									"            pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSP01\");",
									"        });",
									"        pm.test('affectedNumberOfServices is ' + pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\"), function () {",
									"            pm.expect(instance.affectedNumberOfServices) == pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\");",
									"        });",
									"        pm.test('category is ' + pm.globals.get(\"CATEGORYSP01\"), function () {",
									"            pm.expect(instance.category) == pm.globals.get(\"CATEGORYSP01\");",
									"        });",
									"        pm.test('originatorParty is ' + pm.globals.get(\"ORIGINATORPARTYSP01\"), function () {",
									"            pm.expect(instance.originatorParty) == pm.globals.get(\"ORIGINATORPARTYSP01\");",
									"        });",
									"        pm.test('priority is ' + pm.globals.get(\"PRIORITYSP01\"), function () {",
									"            pm.expect(instance.priority) == pm.globals.get(\"PRIORITYSP01\");",
									"        });",
									"        pm.test('reason is ' + pm.globals.get(\"REASONSP01\"), function () {",
									"            pm.expect(instance.reason) == pm.globals.get(\"REASONSP01\");",
									"        });",
									"        pm.test('responsibleParty is ' + pm.globals.get(\"RESPONSIBLEPARTYSP01\"), function () {",
									"            pm.expect(instance.responsibleParty) == pm.globals.get(\"RESPONSIBLEPARTYSP01\");",
									"        });",
									"        pm.test('status is ' + pm.globals.get(\"STATUSSP01\"), function () {",
									"            pm.expect(instance.status) == pm.globals.get(\"STATUSSP01\");",
									"        });",
									"        pm.test('statusChangeDate is ' + pm.globals.get(\"STATUSCHANGEDATESP01\"), function () {",
									"            pm.expect(instance.statusChangeDate) == pm.globals.get(\"STATUSCHANGEDATESP01\");",
									"        });",
									"        pm.test('timeChanged is ' + pm.globals.get(\"TIMECHANGEDSP01\"), function () {",
									"            pm.expect(instance.timeChanged) == pm.globals.get(\"TIMECHANGEDSP01\");",
									"        });",
									"        pm.test('timeRaised is ' + pm.globals.get(\"TIMERAISEDSP01\"), function () {",
									"            pm.expect(instance.timeRaised) == pm.globals.get(\"TIMERAISEDSP01\");",
									"        });",
									"",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceProblemAPI}}/serviceProblem",
							"host": [
								"{{ServiceProblemAPI}}"
							],
							"path": [
								"serviceProblem"
							]
						}
					},
					"response": []
				},
				{
					"name": "/serviceProblem/{{ID}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad6c36f4-1547-472c-b6c1-a32e85f31d7a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"",
									"        var requiredAttributes = ['id', 'href', 'description', 'affectedNumberOfServices', 'category', 'originatorParty', 'priority', 'reason', 'responsibleParty', 'status', 'statusChangeDate', 'timeChanged', 'timeRaised', ];",
									"",
									"        pm.test('Instance has all mandatory attributes', function () {",
									"            pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
									"        });",
									"",
									"",
									"",
									"        pm.test('Response id attribute is of type string', function () {",
									"            pm.expect(instance.id).to.be.a('string');",
									"        });",
									"        pm.test('Response href attribute is of type string', function () {",
									"            pm.expect(instance.href).to.be.a('string');",
									"        });",
									"        pm.test('Response description attribute is of type string', function () {",
									"            pm.expect(instance.description).to.be.a('string');",
									"        });",
									"        pm.test('Response affectedNumberOfServices attribute is of type number', function () {",
									"            pm.expect(instance.affectedNumberOfServices).to.be.a('number');",
									"        });",
									"        pm.test('Response category attribute is of type string', function () {",
									"            pm.expect(instance.category).to.be.a('string');",
									"        });",
									"        pm.test('Response originatorParty attribute is of type object', function () {",
									"            pm.expect(instance.originatorParty).to.be.a('object');",
									"        });",
									"        pm.test('Response priority attribute is of type number', function () {",
									"            pm.expect(instance.priority).to.be.a('number');",
									"        });",
									"        pm.test('Response reason attribute is of type string', function () {",
									"            pm.expect(instance.reason).to.be.a('string');",
									"        });",
									"        pm.test('Response responsibleParty attribute is of type object', function () {",
									"            pm.expect(instance.responsibleParty).to.be.a('object');",
									"        });",
									"        pm.test('Response status attribute is of type string', function () {",
									"            pm.expect(instance.status).to.be.a('string');",
									"        });",
									"        pm.test('Response statusChangeDate attribute is of type string', function () {",
									"            pm.expect(instance.statusChangeDate).to.be.a('string');",
									"        });",
									"        pm.test('Response timeChanged attribute is of type string', function () {",
									"            pm.expect(instance.timeChanged).to.be.a('string');",
									"        });",
									"        pm.test('Response timeRaised attribute is of type string', function () {",
									"            pm.expect(instance.timeRaised).to.be.a('string');",
									"        });",
									"",
									"",
									"        pm.test(\"Body includes value held on id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.id);",
									"        });",
									"        pm.test(\"Body includes value held on href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.href);",
									"        });",
									"        pm.test(\"Body includes value held on description\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.description);",
									"        });",
									"        pm.test(\"Body includes value held on affectedNumberOfServices\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.affectedNumberOfServices);",
									"        });",
									"        pm.test(\"Body includes value held on category\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.category);",
									"        });",
									"        pm.test(\"Body includes value held on priority\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.priority);",
									"        });",
									"        pm.test(\"Body includes value held on reason\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.reason);",
									"        });",
									"        pm.test(\"Body includes value held on status\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.status);",
									"        });",
									"        pm.test(\"Body includes value held on statusChangeDate\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.statusChangeDate);",
									"        });",
									"        pm.test(\"Body includes value held on timeChanged\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.timeChanged);",
									"        });",
									"        pm.test(\"Body includes value held on timeRaised\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.timeRaised);",
									"        });",
									"",
									"",
									"",
									"",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSP01\")) {",
									"",
									"            pm.test('id is ' + pm.globals.get(\"IDSP01\"), function () {",
									"                pm.expect(instance.id) == pm.globals.get(\"IDSP01\");",
									"            });",
									"            pm.test('href is ' + pm.globals.get(\"HREFSP01\"), function () {",
									"                pm.expect(instance.href) == pm.globals.get(\"HREFSP01\");",
									"            });",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSP01\"), function () {",
									"                pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSP01\");",
									"            });",
									"            pm.test('affectedNumberOfServices is ' + pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\"), function () {",
									"                pm.expect(instance.affectedNumberOfServices) == pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\");",
									"            });",
									"            pm.test('category is ' + pm.globals.get(\"CATEGORYSP01\"), function () {",
									"                pm.expect(instance.category) == pm.globals.get(\"CATEGORYSP01\");",
									"            });",
									"            pm.test('originatorParty is ' + pm.globals.get(\"ORIGINATORPARTYSP01\"), function () {",
									"                pm.expect(instance.originatorParty) == pm.globals.get(\"ORIGINATORPARTYSP01\");",
									"            });",
									"            pm.test('priority is ' + pm.globals.get(\"PRIORITYSP01\"), function () {",
									"                pm.expect(instance.priority) == pm.globals.get(\"PRIORITYSP01\");",
									"            });",
									"            pm.test('reason is ' + pm.globals.get(\"REASONSP01\"), function () {",
									"                pm.expect(instance.reason) == pm.globals.get(\"REASONSP01\");",
									"            });",
									"            pm.test('responsibleParty is ' + pm.globals.get(\"RESPONSIBLEPARTYSP01\"), function () {",
									"                pm.expect(instance.responsibleParty) == pm.globals.get(\"RESPONSIBLEPARTYSP01\");",
									"            });",
									"            pm.test('status is ' + pm.globals.get(\"STATUSSP01\"), function () {",
									"                pm.expect(instance.status) == pm.globals.get(\"STATUSSP01\");",
									"            });",
									"            pm.test('statusChangeDate is ' + pm.globals.get(\"STATUSCHANGEDATESP01\"), function () {",
									"                pm.expect(instance.statusChangeDate) == pm.globals.get(\"STATUSCHANGEDATESP01\");",
									"            });",
									"            pm.test('timeChanged is ' + pm.globals.get(\"TIMECHANGEDSP01\"), function () {",
									"                pm.expect(instance.timeChanged) == pm.globals.get(\"TIMECHANGEDSP01\");",
									"            });",
									"            pm.test('timeRaised is ' + pm.globals.get(\"TIMERAISEDSP01\"), function () {",
									"                pm.expect(instance.timeRaised) == pm.globals.get(\"TIMERAISEDSP01\");",
									"            });",
									"",
									"        }",
									"",
									"",
									"    });",
									"} else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'description', 'affectedNumberOfServices', 'category', 'originatorParty', 'priority', 'reason', 'responsibleParty', 'status', 'statusChangeDate', 'timeChanged', 'timeRaised', ];",
									"",
									"    pm.test('Instance has all mandatory attributes', function () {",
									"        pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
									"    });",
									"",
									"",
									"",
									"    pm.test('Response id attribute is of type string', function () {",
									"        pm.expect(instance.id).to.be.a('string');",
									"    });",
									"    pm.test('Response href attribute is of type string', function () {",
									"        pm.expect(instance.href).to.be.a('string');",
									"    });",
									"    pm.test('Response description attribute is of type string', function () {",
									"        pm.expect(instance.description).to.be.a('string');",
									"    });",
									"    pm.test('Response affectedNumberOfServices attribute is of type number', function () {",
									"        pm.expect(instance.affectedNumberOfServices).to.be.a('number');",
									"    });",
									"    pm.test('Response category attribute is of type string', function () {",
									"        pm.expect(instance.category).to.be.a('string');",
									"    });",
									"    pm.test('Response originatorParty attribute is of type object', function () {",
									"        pm.expect(instance.originatorParty).to.be.a('object');",
									"    });",
									"    pm.test('Response priority attribute is of type number', function () {",
									"        pm.expect(instance.priority).to.be.a('number');",
									"    });",
									"    pm.test('Response reason attribute is of type string', function () {",
									"        pm.expect(instance.reason).to.be.a('string');",
									"    });",
									"    pm.test('Response responsibleParty attribute is of type object', function () {",
									"        pm.expect(instance.responsibleParty).to.be.a('object');",
									"    });",
									"    pm.test('Response status attribute is of type string', function () {",
									"        pm.expect(instance.status).to.be.a('string');",
									"    });",
									"    pm.test('Response statusChangeDate attribute is of type string', function () {",
									"        pm.expect(instance.statusChangeDate).to.be.a('string');",
									"    });",
									"    pm.test('Response timeChanged attribute is of type string', function () {",
									"        pm.expect(instance.timeChanged).to.be.a('string');",
									"    });",
									"    pm.test('Response timeRaised attribute is of type string', function () {",
									"        pm.expect(instance.timeRaised).to.be.a('string');",
									"    });",
									"",
									"",
									"    pm.test(\"Body includes value held on id\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.id);",
									"    });",
									"    pm.test(\"Body includes value held on href\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.href);",
									"    });",
									"    pm.test(\"Body includes value held on description\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.description);",
									"    });",
									"    pm.test(\"Body includes value held on affectedNumberOfServices\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.affectedNumberOfServices);",
									"    });",
									"    pm.test(\"Body includes value held on category\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.category);",
									"    });",
									"    pm.test(\"Body includes value held on priority\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.priority);",
									"    });",
									"    pm.test(\"Body includes value held on reason\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.reason);",
									"    });",
									"    pm.test(\"Body includes value held on status\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.status);",
									"    });",
									"    pm.test(\"Body includes value held on statusChangeDate\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.statusChangeDate);",
									"    });",
									"    pm.test(\"Body includes value held on timeChanged\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.timeChanged);",
									"    });",
									"    pm.test(\"Body includes value held on timeRaised\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.timeRaised);",
									"    });",
									"",
									"",
									"",
									"",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDSP01\")) {",
									"",
									"        pm.test('id is ' + pm.globals.get(\"IDSP01\"), function () {",
									"            pm.expect(instance.id) == pm.globals.get(\"IDSP01\");",
									"        });",
									"        pm.test('href is ' + pm.globals.get(\"HREFSP01\"), function () {",
									"            pm.expect(instance.href) == pm.globals.get(\"HREFSP01\");",
									"        });",
									"        pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSP01\"), function () {",
									"            pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSP01\");",
									"        });",
									"        pm.test('affectedNumberOfServices is ' + pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\"), function () {",
									"            pm.expect(instance.affectedNumberOfServices) == pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\");",
									"        });",
									"        pm.test('category is ' + pm.globals.get(\"CATEGORYSP01\"), function () {",
									"            pm.expect(instance.category) == pm.globals.get(\"CATEGORYSP01\");",
									"        });",
									"        pm.test('originatorParty is ' + pm.globals.get(\"ORIGINATORPARTYSP01\"), function () {",
									"            pm.expect(instance.originatorParty) == pm.globals.get(\"ORIGINATORPARTYSP01\");",
									"        });",
									"        pm.test('priority is ' + pm.globals.get(\"PRIORITYSP01\"), function () {",
									"            pm.expect(instance.priority) == pm.globals.get(\"PRIORITYSP01\");",
									"        });",
									"        pm.test('reason is ' + pm.globals.get(\"REASONSP01\"), function () {",
									"            pm.expect(instance.reason) == pm.globals.get(\"REASONSP01\");",
									"        });",
									"        pm.test('responsibleParty is ' + pm.globals.get(\"RESPONSIBLEPARTYSP01\"), function () {",
									"            pm.expect(instance.responsibleParty) == pm.globals.get(\"RESPONSIBLEPARTYSP01\");",
									"        });",
									"        pm.test('status is ' + pm.globals.get(\"STATUSSP01\"), function () {",
									"            pm.expect(instance.status) == pm.globals.get(\"STATUSSP01\");",
									"        });",
									"        pm.test('statusChangeDate is ' + pm.globals.get(\"STATUSCHANGEDATESP01\"), function () {",
									"            pm.expect(instance.statusChangeDate) == pm.globals.get(\"STATUSCHANGEDATESP01\");",
									"        });",
									"        pm.test('timeChanged is ' + pm.globals.get(\"TIMECHANGEDSP01\"), function () {",
									"            pm.expect(instance.timeChanged) == pm.globals.get(\"TIMECHANGEDSP01\");",
									"        });",
									"        pm.test('timeRaised is ' + pm.globals.get(\"TIMERAISEDSP01\"), function () {",
									"            pm.expect(instance.timeRaised) == pm.globals.get(\"TIMERAISEDSP01\");",
									"        });",
									"",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceProblemAPI}}/serviceProblem/{{IDSP01}}",
							"host": [
								"{{ServiceProblemAPI}}"
							],
							"path": [
								"serviceProblem",
								"{{IDSP01}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/serviceProblem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad6c36f4-1547-472c-b6c1-a32e85f31d7a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = [ 'id', 'href', 'description', 'affectedNumberOfServices', 'category', 'originatorParty', 'priority', 'reason', 'responsibleParty', 'status', 'statusChangeDate', 'timeChanged', 'timeRaised',  ];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response id attribute is of type string', function() { pm.expect(instance.id).to.be.a('string'); });",
									"pm.test('Response href attribute is of type string', function() { pm.expect(instance.href).to.be.a('string'); });",
									"pm.test('Response description attribute is of type string', function() { pm.expect(instance.description).to.be.a('string'); });",
									"pm.test('Response affectedNumberOfServices attribute is of type number', function() { pm.expect(instance.affectedNumberOfServices).to.be.a('number'); });",
									"pm.test('Response category attribute is of type string', function() { pm.expect(instance.category).to.be.a('string'); });",
									"pm.test('Response originatorParty attribute is of type object', function() { pm.expect(instance.originatorParty).to.be.a('object'); });",
									"pm.test('Response priority attribute is of type number', function() { pm.expect(instance.priority).to.be.a('number'); });",
									"pm.test('Response reason attribute is of type string', function() { pm.expect(instance.reason).to.be.a('string'); });",
									"pm.test('Response responsibleParty attribute is of type object', function() { pm.expect(instance.responsibleParty).to.be.a('object'); });",
									"pm.test('Response status attribute is of type string', function() { pm.expect(instance.status).to.be.a('string'); });",
									"pm.test('Response statusChangeDate attribute is of type string', function() { pm.expect(instance.statusChangeDate).to.be.a('string'); });",
									"pm.test('Response timeChanged attribute is of type string', function() { pm.expect(instance.timeChanged).to.be.a('string'); });",
									"pm.test('Response timeRaised attribute is of type string', function() { pm.expect(instance.timeRaised).to.be.a('string'); });",
									"",
									"",
									"pm.test('id is set', function() {pm.globals.set('IDSP02', instance.id); pm.expect(instance.id) == pm.globals.get(\"IDSP02\");});",
									"pm.test('href is set', function() {pm.globals.set('HREFSP02', instance.href); pm.expect(instance.href) == pm.globals.get(\"HREFSP02\");});",
									"pm.test('description is set', function() {pm.globals.set('DESCRIPTIONSP02', instance.description); pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSP02\");});",
									"pm.test('affectedNumberOfServices is set', function() {pm.globals.set('AFFECTEDNUMBEROFSERVICESSP02', instance.affectedNumberOfServices); pm.expect(instance.affectedNumberOfServices) == pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP02\");});",
									"pm.test('category is set', function() {pm.globals.set('CATEGORYSP02', instance.category); pm.expect(instance.category) == pm.globals.get(\"CATEGORYSP02\");});",
									"pm.test('originatorParty is set', function() {pm.globals.set('ORIGINATORPARTYSP02', instance.originatorParty); pm.expect(instance.originatorParty) == pm.globals.get(\"ORIGINATORPARTYSP02\");});",
									"pm.test('priority is set', function() {pm.globals.set('PRIORITYSP02', instance.priority); pm.expect(instance.priority) == pm.globals.get(\"PRIORITYSP02\");});",
									"pm.test('reason is set', function() {pm.globals.set('REASONSP02', instance.reason); pm.expect(instance.reason) == pm.globals.get(\"REASONSP02\");});",
									"pm.test('responsibleParty is set', function() {pm.globals.set('RESPONSIBLEPARTYSP02', instance.responsibleParty); pm.expect(instance.responsibleParty) == pm.globals.get(\"RESPONSIBLEPARTYSP02\");});",
									"pm.test('status is set', function() {pm.globals.set('STATUSSP02', instance.status); pm.expect(instance.status) == pm.globals.get(\"STATUSSP02\");});",
									"pm.test('statusChangeDate is set', function() {pm.globals.set('STATUSCHANGEDATESP02', instance.statusChangeDate); pm.expect(instance.statusChangeDate) == pm.globals.get(\"STATUSCHANGEDATESP02\");});",
									"pm.test('timeChanged is set', function() {pm.globals.set('TIMECHANGEDSP02', instance.timeChanged); pm.expect(instance.timeChanged) == pm.globals.get(\"TIMECHANGEDSP02\");});",
									"pm.test('timeRaised is set', function() {pm.globals.set('TIMERAISEDSP02', instance.timeRaised); pm.expect(instance.timeRaised) == pm.globals.get(\"TIMERAISEDSP02\");});",
									"",
									"",
									"pm.test(\"Body includes value held on id\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.id);",
									"      });",
									"pm.test(\"Body includes value held on href\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.href);",
									"      });",
									"pm.test(\"Body includes value held on description\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.description);",
									"      });",
									"pm.test(\"Body includes value held on affectedNumberOfServices\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.affectedNumberOfServices);",
									"      });",
									"pm.test(\"Body includes value held on category\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.category);",
									"      });",
									"pm.test(\"Body includes value held on priority\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.priority);",
									"      });",
									"pm.test(\"Body includes value held on reason\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.reason);",
									"      });",
									"pm.test(\"Body includes value held on status\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.status);",
									"      });",
									"pm.test(\"Body includes value held on statusChangeDate\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.statusChangeDate);",
									"      });",
									"pm.test(\"Body includes value held on timeChanged\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.timeChanged);",
									"      });",
									"pm.test(\"Body includes value held on timeRaised\", function () {",
									"          pm.expect(pm.response.text()).to.include(instance.timeRaised);",
									"      });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"category\": \"serviceProvider.declared\",\n  \"priority\": 2,\n  \"description\" : \"Internet connection error\",\n  \"reason\": \"unknown\",\n  \"originatorParty\": {\n       \"role\": \"Service Provider\",\n       \"id\":   \"SP_00003\",\n       \"href\": \"http://api/partymanagement/SP_00003\"\n   }\n}"
						},
						"url": {
							"raw": "{{ServiceProblemAPI}}/serviceProblem",
							"host": [
								"{{ServiceProblemAPI}}"
							],
							"path": [
								"serviceProblem"
							]
						}
					},
					"response": []
				},
				{
					"name": "/serviceProblem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad6c36f4-1547-472c-b6c1-a32e85f31d7a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"",
									"        var requiredAttributes = ['id', 'href', 'description', 'affectedNumberOfServices', 'category', 'originatorParty', 'priority', 'reason', 'responsibleParty', 'status', 'statusChangeDate', 'timeChanged', 'timeRaised', ];",
									"",
									"        pm.test('Instance has all mandatory attributes', function () {",
									"            pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
									"        });",
									"",
									"",
									"",
									"        pm.test('Response id attribute is of type string', function () {",
									"            pm.expect(instance.id).to.be.a('string');",
									"        });",
									"        pm.test('Response href attribute is of type string', function () {",
									"            pm.expect(instance.href).to.be.a('string');",
									"        });",
									"        pm.test('Response description attribute is of type string', function () {",
									"            pm.expect(instance.description).to.be.a('string');",
									"        });",
									"        pm.test('Response affectedNumberOfServices attribute is of type number', function () {",
									"            pm.expect(instance.affectedNumberOfServices).to.be.a('number');",
									"        });",
									"        pm.test('Response category attribute is of type string', function () {",
									"            pm.expect(instance.category).to.be.a('string');",
									"        });",
									"        pm.test('Response originatorParty attribute is of type object', function () {",
									"            pm.expect(instance.originatorParty).to.be.a('object');",
									"        });",
									"        pm.test('Response priority attribute is of type number', function () {",
									"            pm.expect(instance.priority).to.be.a('number');",
									"        });",
									"        pm.test('Response reason attribute is of type string', function () {",
									"            pm.expect(instance.reason).to.be.a('string');",
									"        });",
									"        pm.test('Response responsibleParty attribute is of type object', function () {",
									"            pm.expect(instance.responsibleParty).to.be.a('object');",
									"        });",
									"        pm.test('Response status attribute is of type string', function () {",
									"            pm.expect(instance.status).to.be.a('string');",
									"        });",
									"        pm.test('Response statusChangeDate attribute is of type string', function () {",
									"            pm.expect(instance.statusChangeDate).to.be.a('string');",
									"        });",
									"        pm.test('Response timeChanged attribute is of type string', function () {",
									"            pm.expect(instance.timeChanged).to.be.a('string');",
									"        });",
									"        pm.test('Response timeRaised attribute is of type string', function () {",
									"            pm.expect(instance.timeRaised).to.be.a('string');",
									"        });",
									"",
									"",
									"        pm.test(\"Body includes value held on id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.id);",
									"        });",
									"        pm.test(\"Body includes value held on href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.href);",
									"        });",
									"        pm.test(\"Body includes value held on description\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.description);",
									"        });",
									"        pm.test(\"Body includes value held on affectedNumberOfServices\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.affectedNumberOfServices);",
									"        });",
									"        pm.test(\"Body includes value held on category\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.category);",
									"        });",
									"        pm.test(\"Body includes value held on priority\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.priority);",
									"        });",
									"        pm.test(\"Body includes value held on reason\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.reason);",
									"        });",
									"        pm.test(\"Body includes value held on status\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.status);",
									"        });",
									"        pm.test(\"Body includes value held on statusChangeDate\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.statusChangeDate);",
									"        });",
									"        pm.test(\"Body includes value held on timeChanged\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.timeChanged);",
									"        });",
									"        pm.test(\"Body includes value held on timeRaised\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.timeRaised);",
									"        });",
									"",
									"",
									"",
									"",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSP01\")) {",
									"",
									"            pm.test('id is ' + pm.globals.get(\"IDSP01\"), function () {",
									"                pm.expect(instance.id) == pm.globals.get(\"IDSP01\");",
									"            });",
									"            pm.test('href is ' + pm.globals.get(\"HREFSP01\"), function () {",
									"                pm.expect(instance.href) == pm.globals.get(\"HREFSP01\");",
									"            });",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSP01\"), function () {",
									"                pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSP01\");",
									"            });",
									"            pm.test('affectedNumberOfServices is ' + pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\"), function () {",
									"                pm.expect(instance.affectedNumberOfServices) == pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\");",
									"            });",
									"            pm.test('category is ' + pm.globals.get(\"CATEGORYSP01\"), function () {",
									"                pm.expect(instance.category) == pm.globals.get(\"CATEGORYSP01\");",
									"            });",
									"            pm.test('originatorParty is ' + pm.globals.get(\"ORIGINATORPARTYSP01\"), function () {",
									"                pm.expect(instance.originatorParty) == pm.globals.get(\"ORIGINATORPARTYSP01\");",
									"            });",
									"            pm.test('priority is ' + pm.globals.get(\"PRIORITYSP01\"), function () {",
									"                pm.expect(instance.priority) == pm.globals.get(\"PRIORITYSP01\");",
									"            });",
									"            pm.test('reason is ' + pm.globals.get(\"REASONSP01\"), function () {",
									"                pm.expect(instance.reason) == pm.globals.get(\"REASONSP01\");",
									"            });",
									"            pm.test('responsibleParty is ' + pm.globals.get(\"RESPONSIBLEPARTYSP01\"), function () {",
									"                pm.expect(instance.responsibleParty) == pm.globals.get(\"RESPONSIBLEPARTYSP01\");",
									"            });",
									"            pm.test('status is ' + pm.globals.get(\"STATUSSP01\"), function () {",
									"                pm.expect(instance.status) == pm.globals.get(\"STATUSSP01\");",
									"            });",
									"            pm.test('statusChangeDate is ' + pm.globals.get(\"STATUSCHANGEDATESP01\"), function () {",
									"                pm.expect(instance.statusChangeDate) == pm.globals.get(\"STATUSCHANGEDATESP01\");",
									"            });",
									"            pm.test('timeChanged is ' + pm.globals.get(\"TIMECHANGEDSP01\"), function () {",
									"                pm.expect(instance.timeChanged) == pm.globals.get(\"TIMECHANGEDSP01\");",
									"            });",
									"            pm.test('timeRaised is ' + pm.globals.get(\"TIMERAISEDSP01\"), function () {",
									"                pm.expect(instance.timeRaised) == pm.globals.get(\"TIMERAISEDSP01\");",
									"            });",
									"",
									"        }",
									"",
									"",
									"    });",
									"} else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'description', 'affectedNumberOfServices', 'category', 'originatorParty', 'priority', 'reason', 'responsibleParty', 'status', 'statusChangeDate', 'timeChanged', 'timeRaised', ];",
									"",
									"    pm.test('Instance has all mandatory attributes', function () {",
									"        pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
									"    });",
									"",
									"",
									"",
									"    pm.test('Response id attribute is of type string', function () {",
									"        pm.expect(instance.id).to.be.a('string');",
									"    });",
									"    pm.test('Response href attribute is of type string', function () {",
									"        pm.expect(instance.href).to.be.a('string');",
									"    });",
									"    pm.test('Response description attribute is of type string', function () {",
									"        pm.expect(instance.description).to.be.a('string');",
									"    });",
									"    pm.test('Response affectedNumberOfServices attribute is of type number', function () {",
									"        pm.expect(instance.affectedNumberOfServices).to.be.a('number');",
									"    });",
									"    pm.test('Response category attribute is of type string', function () {",
									"        pm.expect(instance.category).to.be.a('string');",
									"    });",
									"    pm.test('Response originatorParty attribute is of type object', function () {",
									"        pm.expect(instance.originatorParty).to.be.a('object');",
									"    });",
									"    pm.test('Response priority attribute is of type number', function () {",
									"        pm.expect(instance.priority).to.be.a('number');",
									"    });",
									"    pm.test('Response reason attribute is of type string', function () {",
									"        pm.expect(instance.reason).to.be.a('string');",
									"    });",
									"    pm.test('Response responsibleParty attribute is of type object', function () {",
									"        pm.expect(instance.responsibleParty).to.be.a('object');",
									"    });",
									"    pm.test('Response status attribute is of type string', function () {",
									"        pm.expect(instance.status).to.be.a('string');",
									"    });",
									"    pm.test('Response statusChangeDate attribute is of type string', function () {",
									"        pm.expect(instance.statusChangeDate).to.be.a('string');",
									"    });",
									"    pm.test('Response timeChanged attribute is of type string', function () {",
									"        pm.expect(instance.timeChanged).to.be.a('string');",
									"    });",
									"    pm.test('Response timeRaised attribute is of type string', function () {",
									"        pm.expect(instance.timeRaised).to.be.a('string');",
									"    });",
									"",
									"",
									"    pm.test(\"Body includes value held on id\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.id);",
									"    });",
									"    pm.test(\"Body includes value held on href\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.href);",
									"    });",
									"    pm.test(\"Body includes value held on description\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.description);",
									"    });",
									"    pm.test(\"Body includes value held on affectedNumberOfServices\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.affectedNumberOfServices);",
									"    });",
									"    pm.test(\"Body includes value held on category\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.category);",
									"    });",
									"    pm.test(\"Body includes value held on priority\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.priority);",
									"    });",
									"    pm.test(\"Body includes value held on reason\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.reason);",
									"    });",
									"    pm.test(\"Body includes value held on status\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.status);",
									"    });",
									"    pm.test(\"Body includes value held on statusChangeDate\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.statusChangeDate);",
									"    });",
									"    pm.test(\"Body includes value held on timeChanged\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.timeChanged);",
									"    });",
									"    pm.test(\"Body includes value held on timeRaised\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.timeRaised);",
									"    });",
									"",
									"",
									"",
									"",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDSP01\")) {",
									"",
									"        pm.test('id is ' + pm.globals.get(\"IDSP01\"), function () {",
									"            pm.expect(instance.id) == pm.globals.get(\"IDSP01\");",
									"        });",
									"        pm.test('href is ' + pm.globals.get(\"HREFSP01\"), function () {",
									"            pm.expect(instance.href) == pm.globals.get(\"HREFSP01\");",
									"        });",
									"        pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSP01\"), function () {",
									"            pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSP01\");",
									"        });",
									"        pm.test('affectedNumberOfServices is ' + pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\"), function () {",
									"            pm.expect(instance.affectedNumberOfServices) == pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\");",
									"        });",
									"        pm.test('category is ' + pm.globals.get(\"CATEGORYSP01\"), function () {",
									"            pm.expect(instance.category) == pm.globals.get(\"CATEGORYSP01\");",
									"        });",
									"        pm.test('originatorParty is ' + pm.globals.get(\"ORIGINATORPARTYSP01\"), function () {",
									"            pm.expect(instance.originatorParty) == pm.globals.get(\"ORIGINATORPARTYSP01\");",
									"        });",
									"        pm.test('priority is ' + pm.globals.get(\"PRIORITYSP01\"), function () {",
									"            pm.expect(instance.priority) == pm.globals.get(\"PRIORITYSP01\");",
									"        });",
									"        pm.test('reason is ' + pm.globals.get(\"REASONSP01\"), function () {",
									"            pm.expect(instance.reason) == pm.globals.get(\"REASONSP01\");",
									"        });",
									"        pm.test('responsibleParty is ' + pm.globals.get(\"RESPONSIBLEPARTYSP01\"), function () {",
									"            pm.expect(instance.responsibleParty) == pm.globals.get(\"RESPONSIBLEPARTYSP01\");",
									"        });",
									"        pm.test('status is ' + pm.globals.get(\"STATUSSP01\"), function () {",
									"            pm.expect(instance.status) == pm.globals.get(\"STATUSSP01\");",
									"        });",
									"        pm.test('statusChangeDate is ' + pm.globals.get(\"STATUSCHANGEDATESP01\"), function () {",
									"            pm.expect(instance.statusChangeDate) == pm.globals.get(\"STATUSCHANGEDATESP01\");",
									"        });",
									"        pm.test('timeChanged is ' + pm.globals.get(\"TIMECHANGEDSP01\"), function () {",
									"            pm.expect(instance.timeChanged) == pm.globals.get(\"TIMECHANGEDSP01\");",
									"        });",
									"        pm.test('timeRaised is ' + pm.globals.get(\"TIMERAISEDSP01\"), function () {",
									"            pm.expect(instance.timeRaised) == pm.globals.get(\"TIMERAISEDSP01\");",
									"        });",
									"",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceProblemAPI}}/serviceProblem",
							"host": [
								"{{ServiceProblemAPI}}"
							],
							"path": [
								"serviceProblem"
							]
						}
					},
					"response": []
				},
				{
					"name": "/serviceProblem/{{ID}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad6c36f4-1547-472c-b6c1-a32e85f31d7a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"",
									"        var requiredAttributes = ['id', 'href', 'description', 'affectedNumberOfServices', 'category', 'originatorParty', 'priority', 'reason', 'responsibleParty', 'status', 'statusChangeDate', 'timeChanged', 'timeRaised', ];",
									"",
									"        pm.test('Instance has all mandatory attributes', function () {",
									"            pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
									"        });",
									"",
									"",
									"",
									"        pm.test('Response id attribute is of type string', function () {",
									"            pm.expect(instance.id).to.be.a('string');",
									"        });",
									"        pm.test('Response href attribute is of type string', function () {",
									"            pm.expect(instance.href).to.be.a('string');",
									"        });",
									"        pm.test('Response description attribute is of type string', function () {",
									"            pm.expect(instance.description).to.be.a('string');",
									"        });",
									"        pm.test('Response affectedNumberOfServices attribute is of type number', function () {",
									"            pm.expect(instance.affectedNumberOfServices).to.be.a('number');",
									"        });",
									"        pm.test('Response category attribute is of type string', function () {",
									"            pm.expect(instance.category).to.be.a('string');",
									"        });",
									"        pm.test('Response originatorParty attribute is of type object', function () {",
									"            pm.expect(instance.originatorParty).to.be.a('object');",
									"        });",
									"        pm.test('Response priority attribute is of type number', function () {",
									"            pm.expect(instance.priority).to.be.a('number');",
									"        });",
									"        pm.test('Response reason attribute is of type string', function () {",
									"            pm.expect(instance.reason).to.be.a('string');",
									"        });",
									"        pm.test('Response responsibleParty attribute is of type object', function () {",
									"            pm.expect(instance.responsibleParty).to.be.a('object');",
									"        });",
									"        pm.test('Response status attribute is of type string', function () {",
									"            pm.expect(instance.status).to.be.a('string');",
									"        });",
									"        pm.test('Response statusChangeDate attribute is of type string', function () {",
									"            pm.expect(instance.statusChangeDate).to.be.a('string');",
									"        });",
									"        pm.test('Response timeChanged attribute is of type string', function () {",
									"            pm.expect(instance.timeChanged).to.be.a('string');",
									"        });",
									"        pm.test('Response timeRaised attribute is of type string', function () {",
									"            pm.expect(instance.timeRaised).to.be.a('string');",
									"        });",
									"",
									"",
									"        pm.test(\"Body includes value held on id\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.id);",
									"        });",
									"        pm.test(\"Body includes value held on href\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.href);",
									"        });",
									"        pm.test(\"Body includes value held on description\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.description);",
									"        });",
									"        pm.test(\"Body includes value held on affectedNumberOfServices\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.affectedNumberOfServices);",
									"        });",
									"        pm.test(\"Body includes value held on category\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.category);",
									"        });",
									"        pm.test(\"Body includes value held on priority\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.priority);",
									"        });",
									"        pm.test(\"Body includes value held on reason\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.reason);",
									"        });",
									"        pm.test(\"Body includes value held on status\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.status);",
									"        });",
									"        pm.test(\"Body includes value held on statusChangeDate\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.statusChangeDate);",
									"        });",
									"        pm.test(\"Body includes value held on timeChanged\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.timeChanged);",
									"        });",
									"        pm.test(\"Body includes value held on timeRaised\", function () {",
									"            pm.expect(pm.response.text()).to.include(instance.timeRaised);",
									"        });",
									"",
									"",
									"",
									"",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSP01\")) {",
									"",
									"            pm.test('id is ' + pm.globals.get(\"IDSP01\"), function () {",
									"                pm.expect(instance.id) == pm.globals.get(\"IDSP01\");",
									"            });",
									"            pm.test('href is ' + pm.globals.get(\"HREFSP01\"), function () {",
									"                pm.expect(instance.href) == pm.globals.get(\"HREFSP01\");",
									"            });",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSP01\"), function () {",
									"                pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSP01\");",
									"            });",
									"            pm.test('affectedNumberOfServices is ' + pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\"), function () {",
									"                pm.expect(instance.affectedNumberOfServices) == pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\");",
									"            });",
									"            pm.test('category is ' + pm.globals.get(\"CATEGORYSP01\"), function () {",
									"                pm.expect(instance.category) == pm.globals.get(\"CATEGORYSP01\");",
									"            });",
									"            pm.test('originatorParty is ' + pm.globals.get(\"ORIGINATORPARTYSP01\"), function () {",
									"                pm.expect(instance.originatorParty) == pm.globals.get(\"ORIGINATORPARTYSP01\");",
									"            });",
									"            pm.test('priority is ' + pm.globals.get(\"PRIORITYSP01\"), function () {",
									"                pm.expect(instance.priority) == pm.globals.get(\"PRIORITYSP01\");",
									"            });",
									"            pm.test('reason is ' + pm.globals.get(\"REASONSP01\"), function () {",
									"                pm.expect(instance.reason) == pm.globals.get(\"REASONSP01\");",
									"            });",
									"            pm.test('responsibleParty is ' + pm.globals.get(\"RESPONSIBLEPARTYSP01\"), function () {",
									"                pm.expect(instance.responsibleParty) == pm.globals.get(\"RESPONSIBLEPARTYSP01\");",
									"            });",
									"            pm.test('status is ' + pm.globals.get(\"STATUSSP01\"), function () {",
									"                pm.expect(instance.status) == pm.globals.get(\"STATUSSP01\");",
									"            });",
									"            pm.test('statusChangeDate is ' + pm.globals.get(\"STATUSCHANGEDATESP01\"), function () {",
									"                pm.expect(instance.statusChangeDate) == pm.globals.get(\"STATUSCHANGEDATESP01\");",
									"            });",
									"            pm.test('timeChanged is ' + pm.globals.get(\"TIMECHANGEDSP01\"), function () {",
									"                pm.expect(instance.timeChanged) == pm.globals.get(\"TIMECHANGEDSP01\");",
									"            });",
									"            pm.test('timeRaised is ' + pm.globals.get(\"TIMERAISEDSP01\"), function () {",
									"                pm.expect(instance.timeRaised) == pm.globals.get(\"TIMERAISEDSP01\");",
									"            });",
									"",
									"        }",
									"",
									"",
									"    });",
									"} else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'description', 'affectedNumberOfServices', 'category', 'originatorParty', 'priority', 'reason', 'responsibleParty', 'status', 'statusChangeDate', 'timeChanged', 'timeRaised', ];",
									"",
									"    pm.test('Instance has all mandatory attributes', function () {",
									"        pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)",
									"    });",
									"",
									"",
									"",
									"    pm.test('Response id attribute is of type string', function () {",
									"        pm.expect(instance.id).to.be.a('string');",
									"    });",
									"    pm.test('Response href attribute is of type string', function () {",
									"        pm.expect(instance.href).to.be.a('string');",
									"    });",
									"    pm.test('Response description attribute is of type string', function () {",
									"        pm.expect(instance.description).to.be.a('string');",
									"    });",
									"    pm.test('Response affectedNumberOfServices attribute is of type number', function () {",
									"        pm.expect(instance.affectedNumberOfServices).to.be.a('number');",
									"    });",
									"    pm.test('Response category attribute is of type string', function () {",
									"        pm.expect(instance.category).to.be.a('string');",
									"    });",
									"    pm.test('Response originatorParty attribute is of type object', function () {",
									"        pm.expect(instance.originatorParty).to.be.a('object');",
									"    });",
									"    pm.test('Response priority attribute is of type number', function () {",
									"        pm.expect(instance.priority).to.be.a('number');",
									"    });",
									"    pm.test('Response reason attribute is of type string', function () {",
									"        pm.expect(instance.reason).to.be.a('string');",
									"    });",
									"    pm.test('Response responsibleParty attribute is of type object', function () {",
									"        pm.expect(instance.responsibleParty).to.be.a('object');",
									"    });",
									"    pm.test('Response status attribute is of type string', function () {",
									"        pm.expect(instance.status).to.be.a('string');",
									"    });",
									"    pm.test('Response statusChangeDate attribute is of type string', function () {",
									"        pm.expect(instance.statusChangeDate).to.be.a('string');",
									"    });",
									"    pm.test('Response timeChanged attribute is of type string', function () {",
									"        pm.expect(instance.timeChanged).to.be.a('string');",
									"    });",
									"    pm.test('Response timeRaised attribute is of type string', function () {",
									"        pm.expect(instance.timeRaised).to.be.a('string');",
									"    });",
									"",
									"",
									"    pm.test(\"Body includes value held on id\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.id);",
									"    });",
									"    pm.test(\"Body includes value held on href\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.href);",
									"    });",
									"    pm.test(\"Body includes value held on description\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.description);",
									"    });",
									"    pm.test(\"Body includes value held on affectedNumberOfServices\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.affectedNumberOfServices);",
									"    });",
									"    pm.test(\"Body includes value held on category\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.category);",
									"    });",
									"    pm.test(\"Body includes value held on priority\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.priority);",
									"    });",
									"    pm.test(\"Body includes value held on reason\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.reason);",
									"    });",
									"    pm.test(\"Body includes value held on status\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.status);",
									"    });",
									"    pm.test(\"Body includes value held on statusChangeDate\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.statusChangeDate);",
									"    });",
									"    pm.test(\"Body includes value held on timeChanged\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.timeChanged);",
									"    });",
									"    pm.test(\"Body includes value held on timeRaised\", function () {",
									"        pm.expect(pm.response.text()).to.include(instance.timeRaised);",
									"    });",
									"",
									"",
									"",
									"",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDSP01\")) {",
									"",
									"        pm.test('id is ' + pm.globals.get(\"IDSP01\"), function () {",
									"            pm.expect(instance.id) == pm.globals.get(\"IDSP01\");",
									"        });",
									"        pm.test('href is ' + pm.globals.get(\"HREFSP01\"), function () {",
									"            pm.expect(instance.href) == pm.globals.get(\"HREFSP01\");",
									"        });",
									"        pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSP01\"), function () {",
									"            pm.expect(instance.description) == pm.globals.get(\"DESCRIPTIONSP01\");",
									"        });",
									"        pm.test('affectedNumberOfServices is ' + pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\"), function () {",
									"            pm.expect(instance.affectedNumberOfServices) == pm.globals.get(\"AFFECTEDNUMBEROFSERVICESSP01\");",
									"        });",
									"        pm.test('category is ' + pm.globals.get(\"CATEGORYSP01\"), function () {",
									"            pm.expect(instance.category) == pm.globals.get(\"CATEGORYSP01\");",
									"        });",
									"        pm.test('originatorParty is ' + pm.globals.get(\"ORIGINATORPARTYSP01\"), function () {",
									"            pm.expect(instance.originatorParty) == pm.globals.get(\"ORIGINATORPARTYSP01\");",
									"        });",
									"        pm.test('priority is ' + pm.globals.get(\"PRIORITYSP01\"), function () {",
									"            pm.expect(instance.priority) == pm.globals.get(\"PRIORITYSP01\");",
									"        });",
									"        pm.test('reason is ' + pm.globals.get(\"REASONSP01\"), function () {",
									"            pm.expect(instance.reason) == pm.globals.get(\"REASONSP01\");",
									"        });",
									"        pm.test('responsibleParty is ' + pm.globals.get(\"RESPONSIBLEPARTYSP01\"), function () {",
									"            pm.expect(instance.responsibleParty) == pm.globals.get(\"RESPONSIBLEPARTYSP01\");",
									"        });",
									"        pm.test('status is ' + pm.globals.get(\"STATUSSP01\"), function () {",
									"            pm.expect(instance.status) == pm.globals.get(\"STATUSSP01\");",
									"        });",
									"        pm.test('statusChangeDate is ' + pm.globals.get(\"STATUSCHANGEDATESP01\"), function () {",
									"            pm.expect(instance.statusChangeDate) == pm.globals.get(\"STATUSCHANGEDATESP01\");",
									"        });",
									"        pm.test('timeChanged is ' + pm.globals.get(\"TIMECHANGEDSP01\"), function () {",
									"            pm.expect(instance.timeChanged) == pm.globals.get(\"TIMECHANGEDSP01\");",
									"        });",
									"        pm.test('timeRaised is ' + pm.globals.get(\"TIMERAISEDSP01\"), function () {",
									"            pm.expect(instance.timeRaised) == pm.globals.get(\"TIMERAISEDSP01\");",
									"        });",
									"",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceProblemAPI}}/serviceProblem/{{IDSP02}}",
							"host": [
								"{{ServiceProblemAPI}}"
							],
							"path": [
								"serviceProblem",
								"{{IDSP02}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/serviceProblem/{{ID}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad6c36f4-1547-472c-b6c1-a32e85f31d7a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.be.error;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServiceProblemAPI}}/serviceProblem/12345",
							"host": [
								"{{ServiceProblemAPI}}"
							],
							"path": [
								"serviceProblem",
								"12345"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "E2",
			"item": [
				{
					"name": "/serviceProblem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad6c36f4-1547-472c-b6c1-a32e85f31d7a",
								"exec": [
									"pm.test(\"Status code is error\", function () {",
									"    pm.response.to.be.error;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"category\": \"serviceProvider.declared\",\n  \"priority\": \"1\",\n  \"description\" : \"Internet connection error\",\n  \"reason\": \"unknown\"\n}"
						},
						"url": {
							"raw": "{{ServiceProblemAPI}}/serviceProblem",
							"host": [
								"{{ServiceProblemAPI}}"
							],
							"path": [
								"serviceProblem"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}